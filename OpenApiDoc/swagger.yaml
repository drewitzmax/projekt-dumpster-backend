swagger: "2.0"
info:
  description: "This is an API for use with our Skip-Diving-App"
  version: "1.0.0"
  title: "Skip-Diving"
  contact:
    email: "drewitz.max@googlemail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
tags:
- name: "User"
  description: "Actions on the Userbase"
- name: "Provider"
  description: "Actions on the Provider table"
- name: "Login"
  description: "Login for all User-Groups"
- name: "Offer"
  description: "Actions regarding Offers"
schemes:
  - "http"

#Endpoints
paths:
  /user:
    post:
      tags:
        - "User"
      summary: "Create a new UserAccount"
      operationId: "signUp"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added to the Database"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "201":
          description: "User has been created"
        "409":
          description: "Conflict with existing Entry"
    delete:
      tags:
        - "User"
      summary: "Delete own Account"
      operationId: "deleteUser"
      responses:
        "200":
          description: "Account has been deleted"
  /provider:
    post:
      tags:
        - "Provider"
      summary: "Create new Account for provider"
      operationId: "signUpProvider"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Provider Object to be persisted in Database"
          required: true
          schema:
            $ref: "#/definitions/Provider"
      responses:
        "201":
          description: "Provider Account has been created"
        "400":
          description: "Data violating requirements"
    get:
      tags:
        - "Provider"
      summary: "Get all Providers in DB"
      operationId: "getAllProviders"
      responses:
        "200":
          description: "Successfull request, providers have been found"
          schema:
            type: array
            items:
              $ref: '#/definitions/Provider'
        "404":
          description: "Successfull request, no providers found"
    delete:
      tags:
        - "Provider"
      summary: "Delete issuing Account"
      operationId: "deleteProviderAccount"
      responses:
        200:
          description: "account successfully deleted"
        400:
          description: "account couldn't be deleted"
  /provider/category:
    get:
      tags:
        - "Provider"
      summary: "Get all Providers that match the category"
      parameters:
      - in: query
        name: category
        description: "category you want to filter for"
        type: string
      responses:
        200:
          description: "Successfull request, category found"
          schema:
            type: array
            items:
              $ref: '#/definitions/Provider'
        404:
          description: "Successfull request, no category found"
  /provider/classification:
    get:
      tags:
        - "Provider"
      summary: "Get all Providers that match the classification"
      parameters:
      - in: query
        name: classification
        description: "classification stated in the classification object"
        type: string
      responses:
          200:
            description: "Successfull request, matched classification"
            schema:
              type: array
              items:
                $ref: '#/definitions/Provider'
          404:
            description: "Bad request"
  /login:
    get:
      tags:
      - Login
      summary: "Validate login Information"
      operationId: "login"
      responses:
        "200":
          description: "Successfully validated login information"
          schema: 
            $ref: '#/definitions/Role'
        "401":
          description: "Unauthorized: No Account found with this Credentials"
  /offer:
    post:
      tags:
      - Offer
      summary: "Create a new Offer"
      operationId: "createOffer"
      consumes:
      - application/json
      parameters:
      - in: "body"
        name: "body"
        description: "Offer object that you are about to create"
        required: true
        schema:
          $ref: '#/definitions/Offer'
      responses:
        201:
          description: "Offer successfully Created"
    get:
      tags:
      - Offer
      summary: "Get all Offers"
      responses:
        "200":
          description: "Successfull Request"
          schema:
            type: array
            items:
              $ref: '#/definitions/Offer'
  /offer/{id}:
    delete:
      tags:
        - Offer
      summary: "Delete Offer"
      parameters:
        - in: path
          name: id
          required: true
          type: integer
      responses:
        200:
          description: "Offer successfully deleted"
        401:
          description: "You are not the owner of this offer"
  /offer/offerlist:
    get:
      tags:
        - Offer
      summary: "Get all of my Orders"
      responses:
        200:
          description: "Got some Orders"
          schema:
            type: array
            items:
              $ref: '#/definitions/Offer'
        204:
          description: "No orders found for your account"
  /offer/orderlist:
    get:
      tags:
        - Offer
      summary: "Get all of my Companies offers"
      responses:
        200:
          description: "Got some Offers"
          schema:
            type: array
            items:
              $ref: '#/definitions/Offer'
        204:
          description: "No offers found for your account"
  /offer/claim/{id}:
    post:
      tags:
      - Offer
      summary: "Claim offer"
      parameters:
      - in: "path"
        name: "id"
        description: "Id of the offer you want to claim"
        required: true
        type: integer
      responses:
        "200":
          description: "Successfully Claimed"
          schema:
            type: string
        "400":
          description: "Offer couldn't be claimed"
          schema:
            type: string
  /offer/cancle/{id}:
    patch:
      tags:
      - Offer
      summary: "Cancle offer specified by id"
      parameters:
        - in: "path"
          name: "id"
          description: "Id of the offer you want to cancle"
          required: true
          type: integer
      responses:
        "200":
          description: "Order successfully cancled"
        "400":
          description: "You haven't oredered this"
#Objects
definitions:
  User:
    type: object
    properties:
      userId:
        type: integer
      name:
        type: string
      lastname:
        type: string
      username:
        type: string
      email:
        type: string
      password:
        type: string
    required:
      - username
      - email
      - password
  Provider:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      address:
        type: string
      phoneNumber:
        type: string
      email:
        type: string
      password:
        type: string
      homepageUrl:
        type: string
      category:
        type: string
      classification:
        type: string
      photos:
        type: array
        items:
          type: string
    required: 
    - name
    - address
    - phoneNumber
    - email
    - password
  Offer:
    type: object
    properties:
      id:
        type: integer
      title:
        type: string
      description:
        type: string
      amountOffered:
        type: integer
      amountRemaining:
        type: integer
    required:
    - title
    - description
    - amountOffered

  #Enums
  Classification:
    type: string
    enum: ["RESTAURANT", "SUPERMARKET"]
  Role:
    type: string
    enum: ['[user]','[admin]', '[provider]']